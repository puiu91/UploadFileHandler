<?php

/*

The $_FILES array generated by PHP for a file submitted through a form/

Array
(
    [upload] => Array
    (
        [name] => query look.png
        [type] => image/png
        [tmp_name] => C:\Windows\Temp\php9FA7.tmp
        [error] => 0
        [size] => 95917
    )
)

*/

class UploadFileHandler {

  /**
   * @var array List of allowable extensions.
   */
  private $allowedExtensions = [];

  /**
   * @var array File info from $_FILE global.
   */
  private $file = [];

  /**
   * @var SplFileInfo Stores object of type SplFileInfo.
   */
  private $fileInfo;

  /**
   * @var int Allowable file size limit in bytes.
   */
  private $sizeLimit = 10000;

  /**
   * @var string Stores sanitized filename.
   */
  private $sanitizedFilename;

  /**
   * @var string Stores the upload file path.
   */
  private $uploadPath;

  /**
   * UploadFileHandler constructor.
   *
   * @param array      $file
   * @param            $uploadPath
   */
  public function __construct(array $file, $uploadPath) {
    $this->file = $file;
    $this->uploadPath = $uploadPath;
    $this->fileInfo = new \SplFileInfo($this->file['name']);

    $this->moveUploadedFile();
  }

  /**
   * @param array $allowedExtensions An array of extensions.
   */
  public function setAllowedExtensions(array $allowedExtensions) {
    $this->allowedExtensions = $allowedExtensions;
  }

  public function checkFileErrors() {

  }

  /**
   * Hashes the filename to prevent malicious injection through the filename.
   *
   * @param $filename
   *
   * @return string
   */
  private function md5hash($filename) {
    return hash('md5', $filename);
  }

  private function sanitizeFilename() {
    $this->sanitizedFilename = $this->md5hash($this->fileInfo->getFilename()) . $this->fileInfo->getExtension();
  }

  private function validateExtension() {
    if ( ! $this->allowedExtensions) {
      throw new Exception('File extensions list was not provided');
    }

    if ( ! in_array($this->fileInfo->getExtension(), $this->allowedExtensions)) {
      throw new Exception('File type not allowed');
    }
  }

  /**
   * Moves the uploaded file from the temporary path to the provided path once validation
   * is successful.
   *
   * Note that move_uploaded_file() performs its owns checks - see the source at:
   * https://github.com/php/php-src/blob/master/ext/standard/basic_functions.c#L5796
   *
   * @throws Exception
   */
  private function moveUploadedFile() {

    if ($this->validateUploadedFile()) {
      $uploadFilename = $this->uploadPath . DIRECTORY_SEPARATOR . $this->sanitizedFilename;

      if ( ! move_uploaded_file($this->file['tmp_name'], $uploadFilename)) {
        throw new Exception('Cannot move file');
      }
    }
  }

  /**
   * Calls the methods responsible for validating the uploaded file.
   *
   * @throws Exception
   */
  public function validateUploadedFile() {
    $this->checkFileErrors();
    $this->validateExtension();
    $this->sanitizeFilename();
  }
}
